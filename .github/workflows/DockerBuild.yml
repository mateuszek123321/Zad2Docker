name: Budowanie kontenera i przeslanie go do repo


#zmienne srodowiskowe 
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}  # Format: username/repository
  CACHE_REPO: ${{ vars.DOCKERHUB_USERNAME }}/zad2dockercache  # Repo dla cache na DockerHub


on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:



jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write 
      
    steps:
      #moduł do sprawdzenia czy uruchamiany łańcuch moze uzyskac dostęp do repozytorium
      - name: Check out repository
        uses: actions/checkout@v4

      #qemu i buildx pozwalają instalować komponenty do budowania obrazu z wykorzystaniem bulikita
      - name: QEMU set-up
        uses: docker/setup-qemu-action@v3

      - name: Buildx set-up
        uses: docker/setup-buildx-action@v3

      #Logowanie do dockerhub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      #Logowanie do github 
      - name: Login to Github Container Registry 
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      #Tagowanie obrazu
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix=sha-,format=short
            type=raw,value=latest,enable={{is_default_branch}}

      #Budowanie obrazu bez pushowania
      - name: Build docker image 
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: false
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.CACHE_REPO }}:buildcache
          cache-to: type=registry,ref=${{ env.CACHE_REPO }}:buildcache,mode=max
      
      
      #Skanowanie obrazu za pomocą Docker Scout
      - name: Docker Scout vulnerability scan
        uses: docker/scout-action@v1
        with:
          command: cves
          image: local-scan-image:latest
          exit-code: false
          only-severities: critical
          summary: true


      #przesłanie wyników testu do githuba
      - name: Upload Scout results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: scout-results.sarif

      #budowanie i przesylanie obrazu pod warunkiem braku zagrożeń
      - name: Push docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=registry,ref=${{ env.CACHE_REPO }}/example:cache 
          cache-to: |
            type=registry,ref=${{ env.CACHE_REPO }}/example:cache  
      